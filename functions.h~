#ifndef FUNCTIONS_H
#define FUNCTIONS_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>

//globals
int firstPoint;
int line;
int profondeur;
FILE *fres;
#define RED     "\033[1;31m" //error
#define WHITE   "\033[0;m" 		//text
#define GREEN   "\033[1;32m" 	//success
#define YELLOW    "\033[1;33m" //debug
#define BLUE    "\033[1;34m" //info

/*faire liste de variable, 3 listes, une pour chaque type*/
//type coordonnée, un double : "1"
typedef struct {
	char* id;
	double valeur;
}struct_coordonnee;
typedef struct_coordonnee* Coordonnee;
//type liste simplement chainée de coordonnées
typedef struct{
	int profondeur;
    Coordonnee coor;
    struct struct_liste_coor *nxt;
}struct_liste_coor;
typedef struct_liste_coor* Liste_coor;
//notre liste globale de variable coordonnées
Liste_coor GlobalListeCoor;

//type point, un couple de double : "(0,10)"
typedef struct {
	char* id;
	double x;
	double y;
}struct_point;
typedef struct_point* Point;
//type liste simplement chainée de points
typedef struct{
	int profondeur;
    Point point;
    struct struct_liste_point *nxt;
}struct_liste_point;
typedef struct_liste_point* Liste_point;
//notre liste globale de variable point
Liste_point GlobalListePoint;

//type liste, un chemin de couple de double : "(0,10)--(10,10)"
typedef struct
{
	char* id;
    Liste_point chemin;
}struct_chemin;
typedef struct_chemin* Chemin;
//type chemin simplement chainée de listes
typedef struct
{
	int profondeur;
	Chemin chemin;
	struct struct_liste_chemin *nxt;
}struct_liste_chemin;
  
typedef struct_liste_chemin* Liste_chemin;
//notre liste globale de variable liste
Liste_chemin GlobalListeChemin;

//declarations fonctions c
////////////////////////////////////////////////////////////////////////////////
Coordonnee creer_coor(char* id, double val);
Liste_coor ajouterCoor(Liste_coor, int profondeur, char* id);
//return 1 si la variable id existe, -1 sinon
int affecterCoor(Liste_coor listeCoor, int profondeur, char* id, double val);
int affecterCoorToCoor(Liste_coor listeCoor, int profondeur, char*, char*);
int existeDansCoor(Liste_coor listeCoor, int profondeur, char *varname);
//return la valeur, -1 si n'existe pas
Coordonnee valeurCoor(Liste_coor listeCoor, int profondeurchar,char *varname);
void afficherCoors(Liste_coor listeCoor, int profondeur);

Point creer_point(char*, double, double);
Liste_point ajouterPoint(Liste_point, int profondeur,  char*);
//return 1 si la variable id existe, -1 sinon
int affecterPoint(Liste_point, int profondeur, char* id, double x, double y);
Liste_point ajouterEtAffecterPoint(Liste_point, int profondeur, char*, double, double);
int existeDansPoint(Liste_point, int profondeur, char *varname);
//return la valeur, -1 si n'existe pas
Point valeurPoint(Liste_point, int profondeur, char *varname);
void afficherPoints(Liste_point, int profondeur);

Liste_chemin ajouterChemin(Liste_chemin, int profondeur, char* id);
//return 1 si la variable id existe, -1 sinon
int affecterPointToChemin(Liste_chemin, int profondeur,  char* id, double x, double y);
int existeDansChemin(Liste_chemin, int profondeur, char *varname);
//return la valeur, -1 si n'existe pas
Chemin valeurChemin(Liste_chemin, int profondeur, char *varname);
void afficherChemin(Liste_chemin, int profondeur);

double premierpoint_x;
double premierpoint_y;
double pointprec_x;
double pointprec_y;
void draw(void);
void dessiner_point(double, double);

#endif /*FUNCTIONS_H*/
